[gd_resource type="VisualShader" load_steps=10 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeExpression" id=2]
size = Vector2( 714, 310 )
expression = "float intensity = (pixelColor.r + pixelColor.g + pixelColor.b) / 3.0;
ivec2 thresholdMapCoords = ivec2(mod(screenCoords.xy, 4.0).xy);
float threshold = get_threshold(int(thresholdMapCoords.x), int(thresholdMapCoords.y));
ditheredColor.rgb = (intensity * 16.0 > threshold) ? color0 : color1;"

[sub_resource type="VisualShaderNodeGlobalExpression" id=3]
size = Vector2( 470, 261 )
expression = "float get_threshold(int x, int y) {
	if (x == 0) {
		if (y == 0) {
			return thresholdMap[0][0];
		} else if (y == 1) {
			return thresholdMap[0][1];
		} else if (y == 2) {
			return thresholdMap[0][2];
		} else if (y == 3) {
			return thresholdMap[0][3];
		}
	} else if (x == 1) {
		if (y == 0) {
			return thresholdMap[1][0];
		} else if (y == 1) {
			return thresholdMap[1][1];
		} else if (y == 2) {
			return thresholdMap[1][2];
		} else if (y == 3) {
			return thresholdMap[1][3];
		}
	} else if (x == 2) {
		if (y == 0) {
			return thresholdMap[2][0];
		} else if (y == 1) {
			return thresholdMap[2][1];
		} else if (y == 2) {
			return thresholdMap[2][2];
		} else if (y == 3) {
			return thresholdMap[2][3];
		}
	} else if (x == 3) {
		if (y == 0) {
			return thresholdMap[3][0];
		} else if (y == 1) {
			return thresholdMap[3][1];
		} else if (y == 2) {
			return thresholdMap[3][2];
		} else if (y == 3) {
			return thresholdMap[3][3];
		}
	}
	return 0.0;
}"

[sub_resource type="VisualShaderNodeVectorOp" id=4]
operator = 2

[sub_resource type="VisualShaderNodeVec3Uniform" id=5]
uniform_name = "ScreenSize"

[sub_resource type="VisualShaderNodeColorUniform" id=6]
uniform_name = "ColorLight"

[sub_resource type="VisualShaderNodeColorUniform" id=7]
uniform_name = "ColorDark"

[sub_resource type="VisualShaderNodeTexture" id=8]
source = 2

[sub_resource type="VisualShaderNodeGlobalExpression" id=9]
size = Vector2( 363, 187 )
expression = "const mat4 thresholdMap = mat4(
    vec4(0.0, 12.0, 3.0, 15.0), 
    vec4(8.0, 4.0, 11.0, 7.0), 
    vec4(2.0, 14.0, 1.0, 13.0), 
    vec4(10.0, 6.0, 9.0, 5.0)
);"

[resource]
code = "shader_type canvas_item;
uniform vec3 ScreenSize;
uniform vec4 ColorLight : hint_color;
uniform vec4 ColorDark : hint_color;


// GlobalExpression:0
	const mat4 thresholdMap = mat4(
	    vec4(0.0, 12.0, 3.0, 15.0), 
	    vec4(8.0, 4.0, 11.0, 7.0), 
	    vec4(2.0, 14.0, 1.0, 13.0), 
	    vec4(10.0, 6.0, 9.0, 5.0)
	);
// GlobalExpression:1
	float get_threshold(int x, int y) {
		if (x == 0) {
			if (y == 0) {
				return thresholdMap[0][0];
			} else if (y == 1) {
				return thresholdMap[0][1];
			} else if (y == 2) {
				return thresholdMap[0][2];
			} else if (y == 3) {
				return thresholdMap[0][3];
			}
		} else if (x == 1) {
			if (y == 0) {
				return thresholdMap[1][0];
			} else if (y == 1) {
				return thresholdMap[1][1];
			} else if (y == 2) {
				return thresholdMap[1][2];
			} else if (y == 3) {
				return thresholdMap[1][3];
			}
		} else if (x == 2) {
			if (y == 0) {
				return thresholdMap[2][0];
			} else if (y == 1) {
				return thresholdMap[2][1];
			} else if (y == 2) {
				return thresholdMap[2][2];
			} else if (y == 3) {
				return thresholdMap[2][3];
			}
		} else if (x == 3) {
			if (y == 0) {
				return thresholdMap[3][0];
			} else if (y == 1) {
				return thresholdMap[3][1];
			} else if (y == 2) {
				return thresholdMap[3][2];
			} else if (y == 3) {
				return thresholdMap[3][3];
			}
		}
		return 0.0;
	}

void vertex() {
// Output:0

}

void fragment() {
// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 _tex_read = texture( TEXTURE , UV.xy );
		n_out4p0 = _tex_read.rgb;
		n_out4p1 = _tex_read.a;
	}

// Input:10
	vec3 n_out10p0;
	n_out10p0 = vec3(UV,0.0);

// VectorUniform:14
	vec3 n_out14p0;
	n_out14p0 = ScreenSize;

// VectorOp:13
	vec3 n_out13p0;
	n_out13p0 = n_out10p0 * n_out14p0;

// ColorUniform:15
	vec3 n_out15p0;
	float n_out15p1;
	n_out15p0 = ColorLight.rgb;
	n_out15p1 = ColorLight.a;

// ColorUniform:16
	vec3 n_out16p0;
	float n_out16p1;
	n_out16p0 = ColorDark.rgb;
	n_out16p1 = ColorDark.a;

// Expression:11
	vec3 n_out11p0;
	n_out11p0=vec3(0.0, 0.0, 0.0);
	{
		float intensity = (n_out4p0.r + n_out4p0.g + n_out4p0.b) / 3.0;
		ivec2 thresholdMapCoords = ivec2(mod(n_out13p0.xy, 4.0).xy);
		float threshold = get_threshold(int(thresholdMapCoords.x), int(thresholdMapCoords.y));
		n_out11p0.rgb = (intensity * 16.0 > threshold) ? n_out15p0 : n_out16p0;
	}
// Output:0
	COLOR.rgb = n_out11p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -920.801, -47.875 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 340, -140 )
nodes/fragment/4/node = SubResource( 8 )
nodes/fragment/4/position = Vector2( -800, -40 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( -800, -240 )
nodes/fragment/9/size = Vector2( 363, 187 )
nodes/fragment/9/input_ports = ""
nodes/fragment/9/output_ports = ""
nodes/fragment/9/expression = "const mat4 thresholdMap = mat4(
    vec4(0.0, 12.0, 3.0, 15.0), 
    vec4(8.0, 4.0, 11.0, 7.0), 
    vec4(2.0, 14.0, 1.0, 13.0), 
    vec4(10.0, 6.0, 9.0, 5.0)
);"
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -800, 100 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -400, -140 )
nodes/fragment/11/size = Vector2( 714, 310 )
nodes/fragment/11/input_ports = "0,1,pixelColor;1,1,screenCoords;2,1,color0;3,1,color1;"
nodes/fragment/11/output_ports = "0,1,ditheredColor;"
nodes/fragment/11/expression = "float intensity = (pixelColor.r + pixelColor.g + pixelColor.b) / 3.0;
ivec2 thresholdMapCoords = ivec2(mod(screenCoords.xy, 4.0).xy);
float threshold = get_threshold(int(thresholdMapCoords.x), int(thresholdMapCoords.y));
ditheredColor.rgb = (intensity * 16.0 > threshold) ? color0 : color1;"
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -800, -520 )
nodes/fragment/12/size = Vector2( 470, 261 )
nodes/fragment/12/input_ports = ""
nodes/fragment/12/output_ports = ""
nodes/fragment/12/expression = "float get_threshold(int x, int y) {
	if (x == 0) {
		if (y == 0) {
			return thresholdMap[0][0];
		} else if (y == 1) {
			return thresholdMap[0][1];
		} else if (y == 2) {
			return thresholdMap[0][2];
		} else if (y == 3) {
			return thresholdMap[0][3];
		}
	} else if (x == 1) {
		if (y == 0) {
			return thresholdMap[1][0];
		} else if (y == 1) {
			return thresholdMap[1][1];
		} else if (y == 2) {
			return thresholdMap[1][2];
		} else if (y == 3) {
			return thresholdMap[1][3];
		}
	} else if (x == 2) {
		if (y == 0) {
			return thresholdMap[2][0];
		} else if (y == 1) {
			return thresholdMap[2][1];
		} else if (y == 2) {
			return thresholdMap[2][2];
		} else if (y == 3) {
			return thresholdMap[2][3];
		}
	} else if (x == 3) {
		if (y == 0) {
			return thresholdMap[3][0];
		} else if (y == 1) {
			return thresholdMap[3][1];
		} else if (y == 2) {
			return thresholdMap[3][2];
		} else if (y == 3) {
			return thresholdMap[3][3];
		}
	}
	return 0.0;
}"
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -600, 100 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -800, 180 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -800, 260 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -800, 380 )
nodes/fragment/connections = PoolIntArray( 4, 0, 11, 0, 11, 0, 0, 0, 13, 0, 11, 1, 14, 0, 13, 1, 15, 0, 11, 2, 16, 0, 11, 3, 10, 0, 13, 0 )
